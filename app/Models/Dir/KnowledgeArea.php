<?php

namespace App\Models\Dir;

use App\Models\Profile;
use Carbon\Carbon;
use App\Models\Translable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Builder;


/**
 * @property int $id
 * @property string $name       Название
 * @property string $name_en    Название (En)
 * @property string $code       Код
 *
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * @property Carbon $deleted_at
 *
 * @property-read self $parent
 * @property-read self[] $items
 * @property-read Profile[] $profiles
 // @property-read Statement[] $participantStatements
 *
 * @mixin \Eloquent
 */
class KnowledgeArea extends Model {
    use SoftDeletes, Translable;

    protected $table = 'dir_knowledge_areas';

    protected $fillable = ['parent_id', 'name', 'name_en', 'code'];

    protected static function boot() {
        parent::boot(); // TODO: Change the autogenerated stub

        self::addGlobalScope(function(Builder $query){
            $query->orderBy('code');
        });

        self::creating(function(self $me){
            if($me->parent_id){
                $me->level = $me->parent->level + 1;
            } else {
                $me->level = 0;
            }
        });
    }

    protected $translable = ['name'];

    protected $casts = [
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
        'deleted_at' => 'datetime'
    ];


    public function parent(){
        return $this->belongsTo(self::class);
    }

    public function items(){
        return $this->hasMany(self::class, 'parent_id');
    }

    public function profiles(){
        return $this->belongsToMany(Profile::class, 'profile_areas', 'area_id', 'profile_id');
    }

//    public function participantStatements(){
//        return $this->hasMany(Statement::class, 'profile_id');
//    }

    static public function tree(Profile $profile){

        $tree = [];
        $temp = [];
        foreach ($profile->areas as $area){

            $area = $area->translate()->only('id', 'parent_id', 'name', 'code');
            if(array_key_exists($area['parent_id'], $temp)){
                $temp[$area['parent_id']]['items'][] = $area;
            } else {
                $parent = KnowledgeArea::find($area['parent_id'])->translate()->only('id', 'parent_id', 'name', 'code');
                $parent['items'] = [$area];
                $temp[$area['parent_id']] = &$parent;

                if(array_key_exists($parent['parent_id'], $temp)){
                    $temp[$parent['parent_id']]['items'][] = $parent;
                } else {
                    $parent2 = KnowledgeArea::find($parent['parent_id'])->translate()->only('id', 'parent_id', 'name', 'code');
                    $parent2['items'] = [&$parent];
                    $temp[$parent['parent_id']] = &$parent2;
                    $tree[] = &$parent2;
                }
            }
            unset($area);
            unset($parent);
            unset($parent2);
        }

        return $tree;
    }




}
